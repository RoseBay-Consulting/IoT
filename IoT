pragma solidity ^0.4.19;
contract Iot{
    event TransferLog(address, address, uint256);
    //address of the owner who have account on bank and control by client side 
    address public owneraddess ;
    address public vaultaddress; 
     modifier onlySuperUser(address _from, address _to){
     assert(_from == owneraddess);
     assert(_to == vaultaddress);
     _;
     }
    mapping( 
        address =>uint256
        ) public balanceOf;
        
    function IoT(address _vaultaddress) {
         owneraddess = msg.sender;
        balanceOf[msg.sender] = 10;
        vaultaddress = _vaultaddress;
    }
   
    function _transfer(address _from, address _to, uint _value) internal {
        // Prevent transfer to 0x0 address. Use burn() instead
        require(_to != 0x0);
        // Check if the sender has enough
        require(balanceOf[_from] >= _value);
        // Check for overflows
        require(balanceOf[_to] + _value > balanceOf[_to]);
        // Save this for an assertion in the future
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        // Subtract from the sender
        balanceOf[_from] -= _value;
        // Add the same to the recipient
        balanceOf[_to] += _value;
        
        // Asserts are used to use static analysis to find bugs in your code. They should never fail
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }

  function unlock(address _from, uint _value, address _to )public onlySuperUser(_from , _to)returns(bool){
    if(balanceOf[_from]>=10){
    _transfer(_from,_to,_value);
    TransferLog(_from, _to, _value);
    return true;
    }
    else return false;
  }
  
  /** @param _from is for the vault adddress 
   * @param _to is for the owner address
   * so in order to reuse the code _to and _from is swaped for modifier
  */
  function lock(address _from,uint _value, address _to)public onlySuperUser(_to, _from) returns(bool){
    if(balanceOf[_from]>=10){
     _transfer(_from,_to,_value);
     TransferLog(_from, _to, _value);
     return true;
      }
    else return false;
  }
}
